name: ${CONTAINER_GROUP_NAME}

volumes:
  n8n_storage:
  postgres_storage:
  qdrant_storage:
  open-webui:
    name: open-webui
  ollama:
    name: ollama
  flowise:
  crewai-studio:
  elk_data:
  ls_data:
  kb_data:

networks:
  AIKit:
    name: ${CONTAINER_GROUP_NAME}
  elk:
    driver: bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  pull_policy: always
  networks: ["AIKit"]
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST}
  env_file:
    - .env
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  pull_policy: always
  container_name: ollama
  networks: ["AIKit"]
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  pull_policy: always
  networks: ["AIKit"]
  container_name: ollama-pull-llama
  volumes:
    - ollama:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=${OLLAMA_HOST}
  env_file:
    - .env
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  flowise:
    image: flowiseai/flowise
    pull_policy: always
    hostname: flowise
    networks: ["AIKit"]
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
    ports:
        - 3002:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    pull_policy: always
    hostname: open-webui
    networks: ["AIKit"]
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    pull_policy: always
    hostname: postgres
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    env_file:
      - .env
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n-ai
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    hostname: qdrant
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: jupyter
    hostname: jupyter
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
    volumes:
      - ./jupyter/notebooks:/home/jovyan/work
      - ./jupyter/shared:/home/jovyan/shared:ro
    deploy:
      resources:
        limits:
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/lab"]
      interval: 30s
      timeout: 10s
      retries: 5

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd

  crewai-studio:
    image: tham0nk/crewai-studio
    container_name: crewai-studio
    hostname: crewai-studio
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - crewai-studio:/app

  gitingest:
    image: elestio/gitingest:latest
    container_name: gitingest
    hostname: gitingest
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - "3003:8000"
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - QDRANT_URL=http://qdrant:6333
      - ALLOWED_HOSTS=*
    volumes:
      - ./git-repos:/app/repos
    depends_on:
      - qdrant

  comfyui:
    image: ghcr.io/lecode-official/comfyui-docker:latest
    container_name: comfyui
    hostname: comfyui
    networks:
      - AIKit
    restart: unless-stopped
    ports:
      - "8188:8188"
    volumes:
      - /workspace/models/:/workspace/models/:rw
      - /workspace/input:/workspace/ComfyUI/input
      - /workspace/output:/workspace/ComfyUI/output
      - /workspace/custom_nodes:/custom_nodes:rw
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: elasticsearch
    hostname: elasticsearch
    networks:
      - elk
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elk_data:/usr/share/elasticsearch/data/
      - ./elk/elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true

  logstash:
    image: logstash:7.14.0
    container_name: logstash
    hostname: logstash
    networks:
      - elk
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk/elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk/elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.14.0
    container_name: kibana
    hostname: kibana
    networks:
      - elk
    restart: unless-stopped
    ports:
      - "5601:5601"
    volumes:
      - ./elk/elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch

  filebeat:
    image: elastic/filebeat:7.14.0
    container_name: filebeat
    hostname: filebeat
    networks:
      - elk
    restart: unless-stopped
    user: root
    command: ["filebeat", "-e", "--strict.perms=false"]
    volumes:
      - ./elk/elk-config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/syslog:/var/log/syslog:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    depends_on:
      - elasticsearch
      - kibana

  react-dashboard:
    build:
      context: ./aikit-dashboard
      dockerfile: Dockerfile
    container_name: aikit-react-dashboard
    hostname: react-dashboard
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - "8080:80" # Using port 8080 to avoid conflict with the classic dashboard

  dashboard:
    image: nginx:alpine
    container_name: aikit-dashboard
    hostname: dashboard
    networks: ["AIKit"]
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./dashboard:/usr/share/nginx/html
      - ./dashboard/nginx.conf:/etc/nginx/conf.d/default.conf
#     depends_on:
#         - n8n
#         - open-webui
#         - flowise
#         - qdrant
#         - jupyter
#         - elasticsearch
#         - kibana

